Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -std=c99 -Ofast -mtune=broadwell -xAVX -qopenmp -qopt-report=5 -qopt-report-phase=vec -lm -o d2q9-bgk

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(167,3)
   remark #15523: loop was not vectorized: loop control variable tt was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at d2q9-bgk.c(228,3) inlined into d2q9-bgk.c(169,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(228,3) inlined into d2q9-bgk.c(169,5)
   remark #15388: vectorization support: reference cells.s1 has aligned access   [ d2q9-bgk.c(239,7) ]
   remark #15388: vectorization support: reference cells.s1 has aligned access   [ d2q9-bgk.c(239,7) ]
   remark #15388: vectorization support: reference cells.s5 has aligned access   [ d2q9-bgk.c(240,7) ]
   remark #15388: vectorization support: reference cells.s5 has aligned access   [ d2q9-bgk.c(240,7) ]
   remark #15388: vectorization support: reference cells.s8 has aligned access   [ d2q9-bgk.c(241,7) ]
   remark #15388: vectorization support: reference cells.s8 has aligned access   [ d2q9-bgk.c(241,7) ]
   remark #15388: vectorization support: reference cells.s3 has aligned access   [ d2q9-bgk.c(243,7) ]
   remark #15388: vectorization support: reference cells.s3 has aligned access   [ d2q9-bgk.c(243,7) ]
   remark #15388: vectorization support: reference cells.s6 has aligned access   [ d2q9-bgk.c(244,7) ]
   remark #15388: vectorization support: reference cells.s6 has aligned access   [ d2q9-bgk.c(244,7) ]
   remark #15388: vectorization support: reference cells.s7 has aligned access   [ d2q9-bgk.c(245,7) ]
   remark #15388: vectorization support: reference cells.s7 has aligned access   [ d2q9-bgk.c(245,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.557
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15454: masked aligned unit stride loads: 9 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 33 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 2.740 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(228,3) inlined into d2q9-bgk.c(169,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(425,3) inlined into d2q9-bgk.c(192,41)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (459:9) and at (459:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (459:9) and at (459:9)

   LOOP BEGIN at d2q9-bgk.c(428,5) inlined into d2q9-bgk.c(192,41)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (459:9) and at (459:9)
      remark #15346: vector dependence: assumed FLOW dependence between at (459:9) and at (459:9)
      remark #15346: vector dependence: assumed ANTI dependence between at (459:9) and at (459:9)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(422:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(421:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(420:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(419:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(418:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(417:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(416:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(415:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(414:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(422:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(421:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(420:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(419:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(418:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(417:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(416:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(415:32)::main:  Assume directive not useful: removing

d2q9-bgk.c(414:32)::main:  Assume directive not useful: removing

===========================================================================

Begin optimization report for: grid_ops(const t_param, t_speed *, t_speed *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(378,43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(288,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(288,5)
      remark #15388: vectorization support: reference tmp_cells.s0 has aligned access   [ d2q9-bgk.c(297,7) ]
      remark #15388: vectorization support: reference cells.s0 has aligned access   [ d2q9-bgk.c(297,41) ]
      remark #15388: vectorization support: reference tmp_cells.s1 has aligned access   [ d2q9-bgk.c(298,7) ]
      remark #15389: vectorization support: reference cells.s1 has unaligned access   [ d2q9-bgk.c(298,41) ]
      remark #15388: vectorization support: reference tmp_cells.s2 has aligned access   [ d2q9-bgk.c(299,7) ]
      remark #15389: vectorization support: reference cells.s2 has unaligned access   [ d2q9-bgk.c(299,41) ]
      remark #15388: vectorization support: reference tmp_cells.s3 has aligned access   [ d2q9-bgk.c(300,7) ]
      remark #15388: vectorization support: reference tmp_cells.s4 has aligned access   [ d2q9-bgk.c(301,7) ]
      remark #15389: vectorization support: reference cells.s4 has unaligned access   [ d2q9-bgk.c(301,41) ]
      remark #15388: vectorization support: reference tmp_cells.s5 has aligned access   [ d2q9-bgk.c(302,7) ]
      remark #15389: vectorization support: reference cells.s5 has unaligned access   [ d2q9-bgk.c(302,41) ]
      remark #15388: vectorization support: reference tmp_cells.s6 has aligned access   [ d2q9-bgk.c(303,7) ]
      remark #15388: vectorization support: reference tmp_cells.s7 has aligned access   [ d2q9-bgk.c(304,7) ]
      remark #15388: vectorization support: reference tmp_cells.s8 has aligned access   [ d2q9-bgk.c(305,7) ]
      remark #15389: vectorization support: reference cells.s8 has unaligned access   [ d2q9-bgk.c(305,41) ]
      remark #15388: vectorization support: reference tmp_cells.s0 has aligned access   [ d2q9-bgk.c(307,35) ]
      remark #15388: vectorization support: reference tmp_cells.s1 has aligned access   [ d2q9-bgk.c(307,69) ]
      remark #15388: vectorization support: reference tmp_cells.s2 has aligned access   [ d2q9-bgk.c(308,23) ]
      remark #15388: vectorization support: reference tmp_cells.s3 has aligned access   [ d2q9-bgk.c(308,57) ]
      remark #15388: vectorization support: reference tmp_cells.s4 has aligned access   [ d2q9-bgk.c(309,23) ]
      remark #15388: vectorization support: reference tmp_cells.s5 has aligned access   [ d2q9-bgk.c(309,57) ]
      remark #15388: vectorization support: reference tmp_cells.s6 has aligned access   [ d2q9-bgk.c(310,23) ]
      remark #15388: vectorization support: reference tmp_cells.s7 has aligned access   [ d2q9-bgk.c(310,57) ]
      remark #15388: vectorization support: reference tmp_cells.s8 has aligned access   [ d2q9-bgk.c(311,23) ]
      remark #15388: vectorization support: reference tmp_cells.s1 has aligned access   [ d2q9-bgk.c(315,26) ]
      remark #15388: vectorization support: reference tmp_cells.s5 has aligned access   [ d2q9-bgk.c(316,23) ]
      remark #15388: vectorization support: reference tmp_cells.s8 has aligned access   [ d2q9-bgk.c(317,23) ]
      remark #15388: vectorization support: reference tmp_cells.s3 has aligned access   [ d2q9-bgk.c(318,23) ]
      remark #15388: vectorization support: reference tmp_cells.s6 has aligned access   [ d2q9-bgk.c(319,26) ]
      remark #15388: vectorization support: reference tmp_cells.s7 has aligned access   [ d2q9-bgk.c(320,26) ]
      remark #15388: vectorization support: reference tmp_cells.s2 has aligned access   [ d2q9-bgk.c(323,26) ]
      remark #15388: vectorization support: reference tmp_cells.s5 has aligned access   [ d2q9-bgk.c(324,23) ]
      remark #15388: vectorization support: reference tmp_cells.s6 has aligned access   [ d2q9-bgk.c(325,23) ]
      remark #15388: vectorization support: reference tmp_cells.s4 has aligned access   [ d2q9-bgk.c(326,23) ]
      remark #15388: vectorization support: reference tmp_cells.s7 has aligned access   [ d2q9-bgk.c(327,26) ]
      remark #15388: vectorization support: reference tmp_cells.s8 has aligned access   [ d2q9-bgk.c(328,26) ]
      remark #15388: vectorization support: reference tmp_cells.s0 has aligned access   [ d2q9-bgk.c(377,7) ]
      remark #15388: vectorization support: reference tmp_cells.s0 has aligned access   [ d2q9-bgk.c(377,73) ]
      remark #15388: vectorization support: reference tmp_cells.s0 has aligned access   [ d2q9-bgk.c(378,68) ]
      remark #15388: vectorization support: reference tmp_cells.s1 has aligned access   [ d2q9-bgk.c(379,20) ]
      remark #15388: vectorization support: reference tmp_cells.s1 has aligned access   [ d2q9-bgk.c(380,7) ]
      remark #15388: vectorization support: reference tmp_cells.s1 has aligned access   [ d2q9-bgk.c(380,73) ]
      remark #15388: vectorization support: reference tmp_cells.s1 has aligned access   [ d2q9-bgk.c(381,68) ]
      remark #15388: vectorization support: reference tmp_cells.s3 has aligned access   [ d2q9-bgk.c(381,103) ]
      remark #15388: vectorization support: reference tmp_cells.s3 has aligned access   [ d2q9-bgk.c(382,7) ]
      remark #15388: vectorization support: reference tmp_cells.s3 has aligned access   [ d2q9-bgk.c(382,73) ]
      remark #15388: vectorization support: reference tmp_cells.s3 has aligned access   [ d2q9-bgk.c(383,68) ]
      remark #15388: vectorization support: reference tmp_cells.s2 has aligned access   [ d2q9-bgk.c(384,14) ]
      remark #15388: vectorization support: reference tmp_cells.s2 has aligned access   [ d2q9-bgk.c(385,7) ]
      remark #15388: vectorization support: reference tmp_cells.s2 has aligned access   [ d2q9-bgk.c(385,73) ]
      remark #15388: vectorization support: reference tmp_cells.s2 has aligned access   [ d2q9-bgk.c(386,68) ]
      remark #15388: vectorization support: reference tmp_cells.s4 has aligned access   [ d2q9-bgk.c(386,103) ]
      remark #15388: vectorization support: reference tmp_cells.s4 has aligned access   [ d2q9-bgk.c(387,7) ]
      remark #15388: vectorization support: reference tmp_cells.s4 has aligned access   [ d2q9-bgk.c(387,73) ]
      remark #15388: vectorization support: reference tmp_cells.s4 has aligned access   [ d2q9-bgk.c(388,68) ]
      remark #15388: vectorization support: reference tmp_cells.s5 has aligned access   [ d2q9-bgk.c(389,14) ]
      remark #15388: vectorization support: reference tmp_cells.s5 has aligned access   [ d2q9-bgk.c(390,7) ]
      remark #15388: vectorization support: reference tmp_cells.s5 has aligned access   [ d2q9-bgk.c(390,73) ]
      remark #15388: vectorization support: reference tmp_cells.s5 has aligned access   [ d2q9-bgk.c(391,68) ]
      remark #15388: vectorization support: reference tmp_cells.s7 has aligned access   [ d2q9-bgk.c(391,103) ]
      remark #15388: vectorization support: reference tmp_cells.s7 has aligned access   [ d2q9-bgk.c(392,7) ]
      remark #15388: vectorization support: reference tmp_cells.s7 has aligned access   [ d2q9-bgk.c(392,73) ]
      remark #15388: vectorization support: reference tmp_cells.s7 has aligned access   [ d2q9-bgk.c(393,68) ]
      remark #15388: vectorization support: reference tmp_cells.s6 has aligned access   [ d2q9-bgk.c(394,14) ]
      remark #15388: vectorization support: reference tmp_cells.s6 has aligned access   [ d2q9-bgk.c(395,7) ]
      remark #15388: vectorization support: reference tmp_cells.s6 has aligned access   [ d2q9-bgk.c(395,73) ]
      remark #15388: vectorization support: reference tmp_cells.s6 has aligned access   [ d2q9-bgk.c(396,68) ]
      remark #15388: vectorization support: reference tmp_cells.s8 has aligned access   [ d2q9-bgk.c(396,103) ]
      remark #15388: vectorization support: reference tmp_cells.s8 has aligned access   [ d2q9-bgk.c(397,7) ]
      remark #15388: vectorization support: reference tmp_cells.s8 has aligned access   [ d2q9-bgk.c(397,73) ]
      remark #15388: vectorization support: reference tmp_cells.s8 has aligned access   [ d2q9-bgk.c(398,68) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cells.s3>, part of index is nonlinearly computed   [ d2q9-bgk.c(300,41) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cells.s6>, part of index is nonlinearly computed   [ d2q9-bgk.c(303,41) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cells.s7>, part of index is nonlinearly computed   [ d2q9-bgk.c(304,41) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.220
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 46 
      remark #15449: unmasked aligned unit stride stores: 18 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 621 
      remark #15477: vector cost: 163.750 
      remark #15478: estimated potential speedup: 3.390 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(288,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(425,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (459:9) and at (459:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (459:9) and at (459:9)

   LOOP BEGIN at d2q9-bgk.c(428,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (459:9) and at (459:9)
      remark #15346: vector dependence: assumed FLOW dependence between at (459:9) and at (459:9)
      remark #15346: vector dependence: assumed ANTI dependence between at (459:9) and at (459:9)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, t_speed, int *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(759,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(807,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (807:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (807:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (807:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (807:7)

   LOOP BEGIN at d2q9-bgk.c(761,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(807,7) ]
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(820,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(822,5) ]
LOOP END
===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *, t_speed *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(228,3) inlined into d2q9-bgk.c(205,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(228,3) inlined into d2q9-bgk.c(205,3)
   remark #15388: vectorization support: reference cells.s1 has aligned access   [ d2q9-bgk.c(239,7) ]
   remark #15388: vectorization support: reference cells.s1 has aligned access   [ d2q9-bgk.c(239,7) ]
   remark #15388: vectorization support: reference cells.s5 has aligned access   [ d2q9-bgk.c(240,7) ]
   remark #15388: vectorization support: reference cells.s5 has aligned access   [ d2q9-bgk.c(240,7) ]
   remark #15388: vectorization support: reference cells.s8 has aligned access   [ d2q9-bgk.c(241,7) ]
   remark #15388: vectorization support: reference cells.s8 has aligned access   [ d2q9-bgk.c(241,7) ]
   remark #15388: vectorization support: reference cells.s3 has aligned access   [ d2q9-bgk.c(243,7) ]
   remark #15388: vectorization support: reference cells.s3 has aligned access   [ d2q9-bgk.c(243,7) ]
   remark #15388: vectorization support: reference cells.s6 has aligned access   [ d2q9-bgk.c(244,7) ]
   remark #15388: vectorization support: reference cells.s6 has aligned access   [ d2q9-bgk.c(244,7) ]
   remark #15388: vectorization support: reference cells.s7 has aligned access   [ d2q9-bgk.c(245,7) ]
   remark #15388: vectorization support: reference cells.s7 has aligned access   [ d2q9-bgk.c(245,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.557
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15454: masked aligned unit stride loads: 9 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 33 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 2.740 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(228,3) inlined into d2q9-bgk.c(205,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(228,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(228,3)
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(239,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(239,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(240,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(240,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(241,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(241,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(243,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(243,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(244,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(244,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(245,7) ]
   remark #15388: vectorization support: reference cells has aligned access   [ d2q9-bgk.c(245,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.557
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15454: masked aligned unit stride loads: 9 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 33 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 2.740 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(228,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(425,3) inlined into d2q9-bgk.c(716,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (459:9) and at (459:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (459:9) and at (459:9)

   LOOP BEGIN at d2q9-bgk.c(428,5) inlined into d2q9-bgk.c(716,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (459:9) and at (459:9)
      remark #15346: vector dependence: assumed FLOW dependence between at (459:9) and at (459:9)
      remark #15346: vector dependence: assumed ANTI dependence between at (459:9) and at (459:9)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: total_density(const t_param, t_speed)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(723,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(725,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(725,5)
      remark #15389: vectorization support: reference cells.s0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(731,16) ]
      remark #15389: vectorization support: reference cells.s1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(731,46) ]
      remark #15389: vectorization support: reference cells.s2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(732,25) ]
      remark #15389: vectorization support: reference cells.s3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(732,55) ]
      remark #15389: vectorization support: reference cells.s4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(733,25) ]
      remark #15389: vectorization support: reference cells.s5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(733,55) ]
      remark #15389: vectorization support: reference cells.s6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(734,25) ]
      remark #15389: vectorization support: reference cells.s7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(734,55) ]
      remark #15388: vectorization support: reference cells.s8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(735,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.246
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(721,15) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 8 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 8.620 
      remark #15478: estimated potential speedup: 3.030 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(725,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells.s0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(731,16) ]
      remark #15389: vectorization support: reference cells.s1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(731,46) ]
      remark #15389: vectorization support: reference cells.s2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(732,25) ]
      remark #15389: vectorization support: reference cells.s3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(732,55) ]
      remark #15389: vectorization support: reference cells.s4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(733,25) ]
      remark #15389: vectorization support: reference cells.s5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(733,55) ]
      remark #15389: vectorization support: reference cells.s6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(734,25) ]
      remark #15389: vectorization support: reference cells.s7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(734,55) ]
      remark #15388: vectorization support: reference cells.s8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(735,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.290
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(721,15) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 8 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 8.620 
      remark #15478: estimated potential speedup: 3.030 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(725,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed *, t_speed *, int **, float **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(631,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(592,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(594,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(594,5)
      remark #15389: vectorization support: reference cells_ptr->s0[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(597,9) ]
      remark #15389: vectorization support: reference cells_ptr->s1[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(599,9) ]
      remark #15389: vectorization support: reference cells_ptr->s2[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(600,9) ]
      remark #15389: vectorization support: reference cells_ptr->s3[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(601,9) ]
      remark #15389: vectorization support: reference cells_ptr->s4[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(602,9) ]
      remark #15389: vectorization support: reference cells_ptr->s5[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(604,9) ]
      remark #15389: vectorization support: reference cells_ptr->s6[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(605,9) ]
      remark #15389: vectorization support: reference cells_ptr->s7[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(606,9) ]
      remark #15388: vectorization support: reference cells_ptr->s8[ii+jj*params->nx] has aligned access   [ d2q9-bgk.c(607,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.769
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 8 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 11.370 
      remark #15478: estimated potential speedup: 2.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(594,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(613,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(615,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(615,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(615,5)
         remark #15388: vectorization support: reference *obstacles_ptr[ii+jj*params->nx] has aligned access   [ d2q9-bgk.c(617,9) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 3.333
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 1.940 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(615,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================
